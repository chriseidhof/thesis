{-# LANGUAGE UndecidableInstances #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE MultiParamTypeClasses #-}
module SampleModel where

import Control.Applicative
import Data.Maybe (fromJust)
import Data.Time (UTCTime)
import Database.HDBC.Sqlite3 (Connection, connectSqlite3)
import Generics.Records.Database
import Generics.Records.Database.Parse
import Generics.Records.Database.Values
import Generics.Records.ModelName
import Generics.Records
import Generics.Records.Relations
import qualified Generics.Records.Database.Columns as C

data User = User {name :: String, password :: Password, age :: Int, post :: BelongsTo Post}
 deriving (Show, Read)
data Post = Post {title :: String, body :: String}
 deriving (Show, Read)

-- TODO: the rest will be generated by TH

instance (Labeled g, Rep g String, Rep g Password, Rep g (BelongsTo Post)) => Rep g User where
  rep = rUser rep rep rep

instance (Labeled g, Rep g String) => Rep g Post where
  rep = rPost rep 

rUser :: (Labeled g) => g String -> g Password -> g (BelongsTo Post) -> g User
rUser rString rPassword rBtPost = ltype epUser (lcon "User" $ lfield "name"     rString 
                                                     `lprod` (lfield "password" rPassword
                                                     `lprod` (lfield "age"      lint 
                                                     `lprod` (lfield "post"     rBtPost)))
                                      )

rPost :: (Labeled g) => g String -> g Post
rPost rString       = ltype epPost (lcon "Post" $ lfield "title" rString 
                                         `lprod` (lfield "body"  rString)
                                   )

epUser = EP fromUser toUser
epPost = EP fromPost toPost

fromUser :: User -> (String, (Password, (Int, BelongsTo Post)))
fromUser (User x1 x2 x3 x4) = (x1, (x2, (x3, x4)))

fromPost :: Post -> (String, (String))
fromPost (Post x1 x2) = (x1, (x2))


toUser (x1, (x2, (x3, x4))) = (User x1 x2 x3 x4)
toPost (x1, (x2)) = (Post x1 x2)

-- These are the relations
relPost = RBT post $ \u p -> u {post = p}

