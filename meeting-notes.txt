December 10th, 2008

On continuations: make workflows observable, in the same way Doaitse made parser
combinators observable. This allows for possible serialization of continuations.

Explicitly tell in the proposal what we guarantee and what not. Are there
components of the system that are easy to break? What do we need to break in
order for the system to completely break down?

The things that I want to do compared to other solutions:
  * Show how existing FP-techniques can be integrated
  * Have a typed approach (compared to PHP, Perl, Ruby)
  * Use generic programming for generating views, forms and other things (like
    Direct2Web)
  * Statically optimized (i.e. compiled)

Idea for a name: STOP (STatically OPtimized)

--------------------------------
Een gedeelte van iTasks implementeren in Haskell.

Wat wil ik laten zien? Theoretisch / Praktisch?

Lijst aan mogelijkheden maken en afbakenen.

Bestaande libraries hergebruiken waar mogelijk.

Applicatie bedenken: dit wil ik minimaal kunnen bouwen. Bijvoorbeeld: een
cursussysteem: plannen, cijfers, wiki-achtig, gebruikers, evaluaties en
feedback. Zie ook moodle.org

Einde proposal eindigen met de vraag: waarom 9 maanden werk?

Referenties geven
